import os
import sqlite3
from datetime import datetime
from flask import Flask, request, jsonify, render_template_string
from aiogram import Bot, types, Dispatcher
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

app = Flask(__name__)
bot = Bot(token="7898468859:AAED-74SLqvJLWQl_7RazW0jdDdCu7_6tLo")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOMAIN = "vipvdom.ru"
ADMIN_ID = 850188889  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
CONTACTS = """–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ '–ú–∞–∫—Å–∏–º—É–º'
üìû –¢–µ–ª: +79676633355, +79676633377
üåê –°–∞–π—Ç: https://maximum-an.ru"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('ads.db', check_same_thread=False)
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS ads
             (id INTEGER PRIMARY KEY,
             transaction_type TEXT,
             property_type TEXT,
             price INTEGER,
             rooms INTEGER,
             area REAL,
             address TEXT,
             description TEXT,
             status TEXT DEFAULT 'draft',
             created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')

c.execute('''CREATE TABLE IF NOT EXISTS photos
             (id INTEGER PRIMARY KEY,
             ad_id INTEGER,
             file_path TEXT,
             FOREIGN KEY(ad_id) REFERENCES ads(id))''')

c.execute('''CREATE TABLE IF NOT EXISTS users
             (id INTEGER PRIMARY KEY,
             telegram_id INTEGER UNIQUE,
             role TEXT CHECK(role IN ('admin', 'agent', 'user')),
             registered_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')
conn.commit()

# States
class CreateAd(StatesGroup):
    TRANSACTION_TYPE = State()
    PROPERTY_TYPE = State()
    PRICE = State()
    ROOMS = State()
    AREA = State()
    ADDRESS = State()
    DESCRIPTION = State()
    PHOTOS = State()

class AuthStates(StatesGroup):
    WAITING_PASSWORD = State()

# ================= Telegram Handlers =================
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    
    c.execute("SELECT role FROM users WHERE telegram_id=?", (user_id,))
    user = c.fetchone()
    
    if user:
        if user[0] == 'admin':
            await admin_panel(message)
        else:
            await show_user_menu(message)
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîë –í–æ–π—Ç–∏ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", callback_data="agent_login"))
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ '–ú–∞–∫—Å–∏–º—É–º'!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

@dp.callback_query_handler(lambda c: c.data == 'agent_login')
async def request_password(callback_query: types.CallbackQuery):
    await AuthStates.WAITING_PASSWORD.set()
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=types.ForceReply(selective=True)
    )

@dp.message_handler(state=AuthStates.WAITING_PASSWORD)
async def check_password(message: types.Message, state: FSMContext):
    if message.text == "Max2024!":
        try:
            c.execute("INSERT INTO users (telegram_id, role) VALUES (?, 'agent')", 
                     (message.from_user.id,))
            conn.commit()
            await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫!")
            await show_agent_menu(message)
        except sqlite3.IntegrityError:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    await state.finish()

async def show_agent_menu(message: types.Message):
    await message.answer(
        "–ú–µ–Ω—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ûï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_ad"),
            InlineKeyboardButton("üìä –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="my_ads")
        )
    )

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    c.execute("SELECT role FROM users WHERE telegram_id=?", (message.from_user.id,))
    user = c.fetchone()
    
    if user and user[0] == 'admin':
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚ûï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="create_ad"))
        await message.answer("üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)
    else:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)

# ================= Web Routes =================
@app.route('/')
def index():
    return render_template_string(INDEX_HTML.replace("{{CONTACTS}}", CONTACTS))

@app.route('/ad/<int:ad_id>')
def view_ad(ad_id):
    c.execute("SELECT * FROM ads WHERE id=?", (ad_id,))
    ad = c.fetchone()
    
    c.execute("SELECT file_path FROM photos WHERE ad_id=?", (ad_id,))
    photos = [row[0] for row in c.fetchall()]
    
    return render_template_string(AD_HTML, 
                               ad=ad,
                               photos=photos,
                               CONTACTS=CONTACTS,
                               transaction_type='–ü—Ä–æ–¥–∞–∂–∞' if ad[1] == 'sell' else '–ê—Ä–µ–Ω–¥–∞',
                               property_type='–ö–≤–∞—Ä—Ç–∏—Ä–∞' if ad[2] == 'flat' else '–î–æ–º' if ad[2] == 'house' else '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è',
                               price=f"{ad[3]:,}".replace(",", " "))

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML-—à–∞–±–ª–æ–Ω—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)

if __name__ == '__main__':
    os.makedirs('static/photos', exist_ok=True)
    executor.start_webhook(
        dispatcher=dp,
        webhook_path='/webhook',
        on_startup=lambda _: bot.set_webhook(f"https://{DOMAIN}/webhook"),
        host='0.0.0.0',
        port=5000
    )
